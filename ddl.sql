DROP TABLE IF EXISTS USER CASCADE;
DROP TABLE IF EXISTS LECTURE CASCADE;
DROP TABLE IF EXISTS INTEREST_LECTURE CASCADE;
DROP TABLE IF EXISTS REVIEW_POST CASCADE;
DROP TABLE IF EXISTS REVIEW_LIKE CASCADE;
DROP TABLE IF EXISTS STUDY_GROUP CASCADE;
DROP TABLE IF EXISTS STUDY_GROUP_APPLICATION CASCADE;
DROP TABLE IF EXISTS QUESTION_POST CASCADE;
DROP TABLE IF EXISTS QUESTION_COMMENT CASCADE;
DROP TABLE IF EXISTS PAY_HISTORY CASCADE;
DROP TABLE IF EXISTS PURCHASED_LECTURE CASCADE;
DROP TABLE IF EXISTS CHAPTER CASCADE; 
DROP TABLE IF EXISTS RENTAL_LIST CASCADE;
DROP TABLE IF EXISTS RENTAL_PRICE_TBL CASCADE;
DROP TABLE IF EXISTS CHAPTER_PRICE CASCADE;
DROP TABLE IF EXISTS NOTIFICATION CASCADE;
DROP TABLE IF EXISTS STUDY_GROUP_MEMBER CASCADE;

-- USER
CREATE TABLE IF NOT EXISTS `USER`
(
    `USER_ID`    INT NOT NULL AUTO_INCREMENT COMMENT '사용자ID',
    `USER_EMAIL`    VARCHAR(100) NOT NULL COMMENT '사용자이메일',
    `USER_PW`    VARCHAR(255) NOT NULL COMMENT '비밀번호',
    `USER_NICKNAME`    VARCHAR(30) NOT NULL COMMENT '닉네임',
    `USER_NAME`    VARCHAR(255) NOT NULL COMMENT '이름',
    `USER_GENDER`    CHAR(1) NOT NULL COMMENT '성별',
    CHECK (USER_GENDER IN ('M', 'F')),
    `USER_BIRTH`    DATE NOT NULL COMMENT '생년월일',
    `USER_PHONE`    VARCHAR(13) NOT NULL COMMENT '휴대폰번호',
    CHECK (USER_PHONE REGEXP '^0[0-9]{2}-[0-9]{3,4}-[0-9]{4}$' OR USER_PHONE REGEXP '^0[0-9]{9,10}$'),
    `USER_AUTH`    BOOLEAN NOT NULL DEFAULT '1' COMMENT '권한',
    `IS_NOTIFIED`    BOOLEAN DEFAULT '1' NOT NULL COMMENT '알림수신여부',
    `IS_ACTIVE`    BOOLEAN DEFAULT '1' NOT NULL COMMENT '탈퇴여부',
    `USER_EXIT_DATE` DATETIME COMMENT '탈퇴일',
 PRIMARY KEY ( `USER_ID` ),
 UNIQUE (`USER_NICKNAME`)
) COMMENT = '사용자';

-- LECTURE
CREATE TABLE IF NOT EXISTS `LECTURE`
(
    `LECTURE_ID`    INT NOT NULL AUTO_INCREMENT COMMENT '강의ID',
    `TEACHER_ID`    INT NOT NULL COMMENT '강사ID',
    `LECTURE_TITLE` VARCHAR(255) NOT NULL COMMENT '강의명',
    `LECTURE_DESCRIPTION`    LONGTEXT NOT NULL COMMENT '강의설명',
    `LECTURE_TIME`    INT NOT NULL COMMENT '강의시간',
    `LECTURE_DIFFICULTY`    CHAR(1) NOT NULL COMMENT '난이도' CHECK(LECTURE_DIFFICULTY IN ('상', '중', '하')),
    `LECTURE_PRICE`    DECIMAL(10) NOT NULL COMMENT '강의구매가격',
    `IS_INTERESTED`    BOOLEAN DEFAULT '0' NOT NULL COMMENT '관심등록여부',
    FOREIGN KEY (`TEACHER_ID`) REFERENCES `USER`(`USER_ID`),
 	  PRIMARY KEY (`LECTURE_ID`)
) COMMENT = '강의';

-- INTEREST_LECTURE
CREATE TABLE `INTEREST_LECTURE`
(
	 `INTEREST_LECTURE_ID` INT NOT NULL AUTO_INCREMENT COMMENT '관심강의ID',
	 `LECTURE_ID`    INT NOT NULL COMMENT '강의ID',
	 `INTEREST_USER_ID` INT NOT NULL COMMENT '관심이있는사용자ID',
 PRIMARY KEY (`INTEREST_LECTURE_ID`),
 FOREIGN KEY(`LECTURE_ID`) REFERENCES `LECTURE`(`LECTURE_ID`),
 FOREIGN KEY(`INTEREST_USER_ID`) REFERENCES `USER`(`USER_ID`)
) COMMENT = '관심강의';

-- REVIEW_POST
CREATE TABLE IF NOT EXISTS `REVIEW_POST`
(
	 `REVIEW_ID`	INT NOT NULL AUTO_INCREMENT COMMENT '후기게시판ID',
	 `USER_ID`	INT NOT NULL COMMENT '사용자ID',
	 `LECTURE_ID`	INT NOT NULL COMMENT '강의ID',
	 `USER_NICKNAME` VARCHAR(30) COMMENT '사용자닉네임',
	 `REVIEW_TITLE`	VARCHAR(255) NOT NULL COMMENT '후기게시판제목',
	 `REVIEW_CONTENT`	LONGTEXT NOT NULL COMMENT '후기게시판내용',
	 `REVIEW_RATE` INT NOT NULL COMMENT '후기별점',
	 `REVIEW_TIME`	DATETIME NOT NULL DEFAULT NOW() COMMENT '작성시간',
	 `LIKE_COUNT` INT COMMENT '좋아요_개수',
	 `IS_DELETED` BOOLEAN NOT NULL DEFAULT 0 COMMENT '후기삭제여부',
	 PRIMARY KEY(`REVIEW_ID`),
	 FOREIGN KEY(`USER_ID`) REFERENCES `USER`(`USER_ID`),
	 FOREIGN KEY(`LECTURE_ID`) REFERENCES `LECTURE`(`LECTURE_ID`),
	 CHECK (`REVIEW_RATE` BETWEEN 1 AND 5)
) COMMENT = '후기게시글';

-- REVIEW_LIKE
CREATE TABLE `REVIEW_LIKE`
(
	 `REVIEW_GOOD_ID` INT NOT NULL AUTO_INCREMENT COMMENT '후기게시글좋아요ID',
    `REVIEW_ID`    INT NOT NULL COMMENT '후기게시판ID',
    `USER_ID`    INT NOT NULL COMMENT '사용자ID',
 PRIMARY KEY ( `REVIEW_GOOD_ID` ),
 FOREIGN KEY(`USER_ID`) REFERENCES `USER`(`USER_ID`),
 FOREIGN KEY(`REVIEW_ID`) REFERENCES `REVIEW_POST`(`REVIEW_ID`)
) COMMENT = '후기게시글좋아요';

-- STUDY_GROUP
CREATE TABLE `STUDY_GROUP` (
    `STUDY_GRP_ID` INT NOT NULL AUTO_INCREMENT COMMENT '스터디그룹ID',
    `STUDY_GRP_LEADER_ID` INT NOT NULL COMMENT '사용자ID',
    `STUDY_GRP_TITLE` VARCHAR(255) NOT NULL COMMENT '스터디그룹제목',
    `STUDY_GRP_CONTENT` VARCHAR(255) NOT NULL COMMENT '스터디그룹내용',
    `STUDY_GRP_STATUS` BOOLEAN DEFAULT '1' NOT NULL COMMENT '스터디그룹모집현황',
    `STUDY_GRP_MAX_MEMBER` INT DEFAULT 10 NOT NULL COMMENT '스터디그룹최대인원',
    `STUDY_GRP_LINK` VARCHAR(255) NOT NULL COMMENT '스터디그룹링크',
    `STUDY_GRP_END_STATUS` TINYINT(1) DEFAULT 0 NOT NULL COMMENT '스터디그룹종료상태 (1: 종료, 0: 진행중)',
    `CURRENT_MEMBER_COUNT` INT DEFAULT 1 NOT NULL COMMENT '현재멤버수',
    PRIMARY KEY (`STUDY_GRP_ID`),
    FOREIGN KEY (`STUDY_GRP_LEADER_ID`) REFERENCES `USER` (`USER_ID`)
) COMMENT = '스터디그룹';

-- STUDY_GROUP_APPLICATION
CREATE TABLE `STUDY_GROUP_APPLICATION` (
    `STUDY_GRP_APPLICATION_ID` INT NOT NULL AUTO_INCREMENT COMMENT '신청ID',
    `STUDY_GRP_ID` INT NOT NULL COMMENT '스터디그룹ID',
    `USER_ID` INT NOT NULL COMMENT '사용자ID',
    `STATUS` TINYINT(1) DEFAULT 0 NOT NULL COMMENT '신청 상태 (0: 대기중, 1: 승인됨, 2: 거절됨)',
    PRIMARY KEY (`STUDY_GRP_APPLICATION_ID`),
    FOREIGN KEY (`STUDY_GRP_ID`) REFERENCES `STUDY_GROUP` (`STUDY_GRP_ID`),
    FOREIGN KEY (`USER_ID`) REFERENCES `USER` (`USER_ID`)
) COMMENT = '스터디그룹 신청 테이블';

-- QUESTION_POST
CREATE TABLE IF NOT EXISTS `QUESTION_POST`
(
    `QUESTION_ID`    INT NOT NULL AUTO_INCREMENT COMMENT '질문게시판ID',
    `USER_ID`    INT NOT NULL COMMENT '사용자ID',
    `LECTURE_ID` 	INT NOT NULL COMMENT '강의ID',
    `USER_NICKNAME`	VARCHAR(30) NULL COMMENT '사용자닉네임',
    `QUESTION_TITLE`    VARCHAR(255) NOT NULL COMMENT '질문제목',
    `QUESTION_CONTENT`    LONGTEXT NOT NULL COMMENT '질문내용',
    `QUESTION_TIME`    DATETIME DEFAULT CURRENT_TIMESTAMP NOT NULL COMMENT '작성시간',
    `IS_DELETED`	BOOLEAN DEFAULT 0 NOT NULL COMMENT '질문삭제여부',
 PRIMARY KEY ( `QUESTION_ID` ),
 FOREIGN KEY(`USER_ID`) REFERENCES `USER`(`USER_ID`),
 FOREIGN KEY(`LECTURE_ID`) REFERENCES `LECTURE`(`LECTURE_ID`)
) COMMENT = '질문게시글';

-- QUESTION_COMMENT
CREATE TABLE IF NOT EXISTS `QUESTION_COMMENT`
(
    `COMMENT_ID`    INT NOT NULL AUTO_INCREMENT COMMENT '댓글ID',
 	  `QUESTION_ID`    INTEGER NOT NULL COMMENT '질문게시판ID',
    `USER_ID`    INT NOT NULL COMMENT '사용자ID',
    `USER_NICKNAME` VARCHAR(30) NULL COMMENT '사용자닉네임',
    `COMMENT_CONTENT`    VARCHAR(255) NOT NULL COMMENT '댓글내용',
    `COMMENT_TIME`    DATETIME DEFAULT CURRENT_TIMESTAMP NOT NULL COMMENT '작성시간',
    `IS_DELETED`	BOOLEAN DEFAULT 0 NOT NULL COMMENT '댓글삭제여부',
 PRIMARY KEY ( `COMMENT_ID` ),
 FOREIGN KEY (`USER_ID`) REFERENCES `USER`(`USER_ID`),
 FOREIGN KEY (`QUESTION_ID`) REFERENCES `QUESTION_POST`(`QUESTION_ID`)
) COMMENT = '댓글';

-- PAY_HISTORY
CREATE TABLE IF NOT EXISTS `PAY_HISTORY`
(
    `PAY_ID`    INT NOT NULL AUTO_INCREMENT COMMENT '결제내역ID',
    `USER_ID`    INT NOT NULL COMMENT '사용자ID',
    `PAY_DATE`    DATE NOT NULL DEFAULT CURRENT_DATE() COMMENT '결제일',
    `PRICE`    DECIMAL(10) NOT NULL COMMENT '가격',
    `PAY_METHOD`    VARCHAR(255) NOT NULL COMMENT '결제수단',
    `PAY_CONFIRM_ID`    VARCHAR(255) COMMENT '결제완료ID',
    PRIMARY KEY (`PAY_ID`),
    FOREIGN KEY (`USER_ID`) REFERENCES `USER` (`USER_ID`)
) COMMENT = '결제내역';

-- PURCHASED_LECTURE
CREATE TABLE `PURCHASED_LECTURE`
(
    `PURCHASED_LECTURE_ID` INT NOT NULL AUTO_INCREMENT COMMENT '구매강의ID',
    `PAY_HISTORY_ID`       INT NOT NULL COMMENT '결제내역ID',
    `BUYER_ID`             INT NOT NULL COMMENT '구매자ID',
    `LECTURE_ID`           INT NOT NULL COMMENT '강의ID',
    PRIMARY KEY (`PURCHASED_LECTURE_ID`),
    FOREIGN KEY (`PAY_HISTORY_ID`) REFERENCES PAY_HISTORY(`PAY_ID`),
    FOREIGN KEY (`LECTURE_ID`) REFERENCES LECTURE(`LECTURE_ID`),
    FOREIGN KEY (`BUYER_ID`) REFERENCES USER(`USER_ID`)
) COMMENT = '구매강의목록';

-- CHAPTER
CREATE TABLE IF NOT EXISTS CHAPTER
(
  CHAPTER_ID INT NOT NULL AUTO_INCREMENT COMMENT '챕터ID',
  LECTURE_ID INT NOT NULL COMMENT '강의ID',
  CHAPTER_NUMBER INT NOT NULL COMMENT '챕터번호',
  CHAPTER_TITLE VARCHAR(255) NOT NULL COMMENT '챕터명',
  CHAPTER_TIME INT NOT NULL COMMENT '챕터시간',
  REFERENCE_PATH VARCHAR(255) NOT NULL COMMENT '참조경로',
  PRIMARY KEY (CHAPTER_ID),
  FOREIGN KEY (LECTURE_ID) REFERENCES `LECTURE`(LECTURE_ID)
) COMMENT = '강의별챕터';

-- RENTAL_LIST
CREATE TABLE IF NOT EXISTS RENTAL_LIST
(
  RENTAL_ID INT NOT NULL AUTO_INCREMENT COMMENT '대여ID',
  USER_ID INT NOT NULL COMMENT '사용자ID',
  LECTURE_ID INT NOT NULL COMMENT '강의ID',
  CHAPTER_ID INT NOT NULL COMMENT '챕터ID',
  PAY_ID INT NOT NULL COMMENT '결제내역ID',
  RENTAL_START DATETIME DEFAULT CURRENT_TIMESTAMP NOT NULL COMMENT '대여 시작일',
  RENTAL_END DATETIME NOT NULL COMMENT '대여 만료일',
  TARGET_DATE DATETIME COMMENT '시청 목표일',
  RENTAL_STATUS VARCHAR(30) NOT NULL DEFAULT '수강 중' COMMENT '대여 상태',
  PRIMARY KEY (RENTAL_ID),
  FOREIGN KEY(PAY_ID) REFERENCES PAY_HISTORY(PAY_ID),
  FOREIGN KEY(USER_ID) REFERENCES USER(USER_ID),
  FOREIGN KEY(CHAPTER_ID) REFERENCES CHAPTER(CHAPTER_ID),
  FOREIGN KEY(LECTURE_ID) REFERENCES LECTURE(LECTURE_ID)
) COMMENT = '대여 강의 챕터 목록';

-- RENTAL_PRICE_TBL
CREATE TABLE IF NOT EXISTS RENTAL_PRICE_TBL
(
  RENTAL_PRICE_ID INT NOT NULL AUTO_INCREMENT COMMENT '대여가격ID',
  RENTAL_DAY INT NOT NULL COMMENT '대여기간',
  RENTAL_PRICE DECIMAL(10) NOT NULL COMMENT '대여가격',
  PRIMARY KEY (RENTAL_PRICE_ID)
) COMMENT = '대여가격';

-- CHAPTER_PRICE
CREATE TABLE IF NOT EXISTS `CHAPTER_PRICE`
(
    `CHAPTER_PRICE_ID`    INT NOT NULL AUTO_INCREMENT COMMENT '챕터별가격ID',
    `CHAPTER_ID`    INT NOT NULL COMMENT '챕터ID',
    `RENTAL_PRICE_ID`	INT NOT NULL COMMENT '대여가격ID',
    PRIMARY KEY (`CHAPTER_PRICE_ID`),
    FOREIGN KEY (`RENTAL_PRICE_ID`) REFERENCES `RENTAL_PRICE_TBL`(`RENTAL_PRICE_ID`),
    FOREIGN KEY (`CHAPTER_ID`) REFERENCES `CHAPTER`(CHAPTER_ID) -- 외래키 제약조건
) COMMENT = '챕터별가격';

-- NOTIFICATION
CREATE TABLE IF NOT EXISTS `NOTIFICATION`
(
    `NOTIF_ID`    INT NOT NULL AUTO_INCREMENT COMMENT '알림ID',
    `USER_ID`    INT NOT NULL COMMENT '사용자ID',
    `NOTIF_TYPE`    CHAR NOT NULL COMMENT '알림타입',
    CHECK(NOTIF_TYPE IN ('N', 'W', 'C', 'Q')),
    `IS_READ`    BOOLEAN DEFAULT '0'  NOT NULL COMMENT '알림상태',
    `NOTIF_CONTENT`    LONGTEXT NOT NULL COMMENT '알림내용',
    PRIMARY KEY (`NOTIF_ID`),
    FOREIGN KEY (`USER_ID`) REFERENCES `USER` (`USER_ID`)
) COMMENT = '알림';

-- STUDY_GROUP_MEMBER
CREATE TABLE `STUDY_GROUP_MEMBER` (
    `STUDY_GRP_MEMBER_ID` INT NOT NULL AUTO_INCREMENT COMMENT '스터디그룹별멤버 ID',
    `STUDY_GRP_ID` INT NOT NULL COMMENT '스터디그룹ID',
    `USER_ID` INT NOT NULL COMMENT '사용자ID',
    `ROLE` VARCHAR(1) DEFAULT 'M' NOT NULL COMMENT '역할 (L: 리더, M: 멤버)',
    PRIMARY KEY (`STUDY_GRP_MEMBER_ID`),
    FOREIGN KEY (`STUDY_GRP_ID`) REFERENCES `STUDY_GROUP` (`STUDY_GRP_ID`),
    FOREIGN KEY (`USER_ID`) REFERENCES `USER` (`USER_ID`),
    CHECK (`ROLE` IN ('L', 'M'))
) COMMENT = '스터디그룹 멤버';
